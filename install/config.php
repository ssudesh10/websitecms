<?php
// File: config.php (Updated for installer compatibility)
session_start();

// Installation check - redirect to installer if not installed
if (!file_exists(__DIR__ . '/config/installed.lock') && !file_exists(__DIR__ . '/installed.lock')) {
    // Only redirect if we're not already in the installer
    if (!str_contains($_SERVER['REQUEST_URI'], '/install/')) {
        header('Location: install/index.php');
        exit;
    }
}

// Database configuration - These will be updated by the installer
define('DB_HOST', 'localhost');
define('DB_USER', 'roots');
define('DB_PASS', '');
define('DB_NAME', 'websitecmss');

// Base URL configuration
define('BASE_URL', 'http://localhost/websitecmss'); // This will be updated by installer

// Security salts - These will be generated by the installer
define('AUTH_SALT', 'change-this-to-unique-phrase');
define('SECURE_AUTH_SALT', 'change-this-to-unique-phrase');
define('LOGGED_IN_SALT', 'change-this-to-unique-phrase');
define('NONCE_SALT', 'change-this-to-unique-phrase');

// Application settings
define('APP_DEBUG', false);
define('APP_ENV', 'production');

// Upload configuration
define('UPLOAD_DIR', __DIR__ . '/uploads/');
define('UPLOAD_URL', BASE_URL . '/uploads/');
define('MAX_FILE_SIZE', 5 * 1024 * 1024); // 5MB
define('ALLOWED_EXTENSIONS', ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg']);

// Session configuration
ini_set('session.cookie_httponly', 1);
ini_set('session.use_strict_mode', 1);
ini_set('session.cookie_secure', strpos(BASE_URL, 'https://') === 0 ? 1 : 0);

// Timezone setting
date_default_timezone_set('UTC');

// Error reporting
if (APP_DEBUG) {
    error_reporting(E_ALL);
    ini_set('display_errors', 1);
} else {
    error_reporting(0);
    ini_set('display_errors', 0);
}

// Create upload directory if it doesn't exist
if (!file_exists(UPLOAD_DIR)) {
    mkdir(UPLOAD_DIR, 0755, true);
}

// Database connection with error handling
try {
    $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4", DB_USER, DB_PASS, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES => false
    ]);
} catch(PDOException $e) {
    if (APP_DEBUG) {
        die("Connection failed: " . $e->getMessage());
    } else {
        die("Database connection failed. Please contact the administrator.");
    }
}

// Your existing helper functions (keeping all your current functionality)
function isLoggedIn() {
    return isset($_SESSION['admin_id']);
}

function requireLogin() {
    if (!isLoggedIn()) {
        header('Location: ' . BASE_URL . '/admin/login.php');
        exit;
    }
}

function redirect($url) {
    header('Location: ' . $url);
    exit;
}

function getPageBySlug($slug) {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM pages WHERE slug = ? AND is_active = 1");
    $stmt->execute([$slug]);
    return $stmt->fetch();
}

function getPageSections($pageId) {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM page_sections WHERE page_id = ? AND is_active = 1 ORDER BY sort_order ASC, id ASC");
    $stmt->execute([$pageId]);
    return $stmt->fetchAll();
}

function getAllPages() {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM pages WHERE is_active = 1 ORDER BY sort_order ASC");
    $stmt->execute();
    return $stmt->fetchAll();
}

function getAllPagesAdmin() {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM pages ORDER BY sort_order ASC");
    $stmt->execute();
    return $stmt->fetchAll();
}

function formatUrl($slug) {
    if ($slug === 'home') {
        return BASE_URL . '/';
    }
    return BASE_URL . '/' . urlencode($slug);
}

function uploadImage($file) {
    if (!isset($file['tmp_name']) || !is_uploaded_file($file['tmp_name'])) {
        return ['success' => false, 'error' => 'No file uploaded'];
    }
    
    $fileSize = $file['size'];
    $fileName = $file['name'];
    $fileTmpName = $file['tmp_name'];
    $fileError = $file['error'];
    
    if ($fileError !== UPLOAD_ERR_OK) {
        return ['success' => false, 'error' => 'File upload error'];
    }
    
    if ($fileSize > MAX_FILE_SIZE) {
        return ['success' => false, 'error' => 'File size too large (max 5MB)'];
    }
    
    $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
    if (!in_array($fileExtension, ALLOWED_EXTENSIONS)) {
        return ['success' => false, 'error' => 'Invalid file type'];
    }
    
    $newFileName = uniqid() . '_' . time() . '.' . $fileExtension;
    $targetPath = UPLOAD_DIR . $newFileName;
    
    if (move_uploaded_file($fileTmpName, $targetPath)) {
        global $pdo;
        try {
            $relativePath = 'uploads/' . $newFileName;
            $fullUrl = UPLOAD_URL . $newFileName;
            
            $stmt = $pdo->prepare("INSERT INTO uploaded_images (filename, original_name, file_path, file_size, mime_type, uploaded_by) VALUES (?, ?, ?, ?, ?, ?)");
            $stmt->execute([
                $newFileName,
                $fileName,
                $relativePath,
                $fileSize,
                $file['type'],
                $_SESSION['admin_id'] ?? null
            ]);
            
            return [
                'success' => true,
                'url' => $fullUrl,
                'filename' => $newFileName,
                'relativePath' => $relativePath
            ];
        } catch (Exception $e) {
            unlink($targetPath);
            return ['success' => false, 'error' => 'Database error'];
        }
    }
    
    return ['success' => false, 'error' => 'Failed to move uploaded file'];
}

function getUploadedImages() {
    global $pdo;
    $stmt = $pdo->query("SELECT * FROM uploaded_images ORDER BY created_at DESC");
    $images = $stmt->fetchAll();
    
    foreach ($images as &$image) {
        if (!str_starts_with($image['file_path'], 'http')) {
            $image['file_path'] = BASE_URL . '/' . ltrim($image['file_path'], '/');
        }
    }
    
    return $images;
}

function getRelativePath($fullUrl) {
    if (str_starts_with($fullUrl, BASE_URL . '/')) {
        return str_replace(BASE_URL . '/', '', $fullUrl);
    }
    if (str_starts_with($fullUrl, BASE_URL)) {
        return ltrim(str_replace(BASE_URL, '', $fullUrl), '/');
    }
    return $fullUrl;
}

function getFullUrl($relativePath) {
    if (str_starts_with($relativePath, 'http://') || str_starts_with($relativePath, 'https://')) {
        return $relativePath;
    }
    return BASE_URL . '/' . ltrim($relativePath, '/');
}

function migrateImagePathsToRelative() {
    global $pdo;
    
    try {
        $stmt = $pdo->query("SELECT id, file_path FROM uploaded_images WHERE file_path LIKE '" . BASE_URL . "%'");
        $images = $stmt->fetchAll();
        
        $migrated = 0;
        foreach ($images as $image) {
            $relativePath = getRelativePath($image['file_path']);
            
            $updateStmt = $pdo->prepare("UPDATE uploaded_images SET file_path = ? WHERE id = ?");
            $updateStmt->execute([$relativePath, $image['id']]);
            $migrated++;
        }
        
        return ['success' => true, 'migrated' => $migrated];
    } catch (Exception $e) {
        return ['success' => false, 'error' => $e->getMessage()];
    }
}

function updatePageSortOrder($pageId, $sortOrder) {
    global $pdo;
    $stmt = $pdo->prepare("UPDATE pages SET sort_order = ? WHERE id = ?");
    return $stmt->execute([$sortOrder, $pageId]);
}

function getMaxSortOrder() {
    global $pdo;
    $stmt = $pdo->query("SELECT MAX(sort_order) FROM pages");
    return $stmt->fetchColumn() ?: 0;
}

function movePageUp($pageId) {
    global $pdo;
    
    $stmt = $pdo->prepare("SELECT sort_order FROM pages WHERE id = ?");
    $stmt->execute([$pageId]);
    $currentOrder = $stmt->fetchColumn();
    
    if (!$currentOrder) return false;
    
    $stmt = $pdo->prepare("SELECT id, sort_order FROM pages WHERE sort_order < ? ORDER BY sort_order DESC LIMIT 1");
    $stmt->execute([$currentOrder]);
    $prevPage = $stmt->fetch();
    
    if ($prevPage) {
        $pdo->beginTransaction();
        try {
            $stmt = $pdo->prepare("UPDATE pages SET sort_order = ? WHERE id = ?");
            $stmt->execute([$prevPage['sort_order'], $pageId]);
            
            $stmt = $pdo->prepare("UPDATE pages SET sort_order = ? WHERE id = ?");
            $stmt->execute([$currentOrder, $prevPage['id']]);
            
            $pdo->commit();
            return true;
        } catch (Exception $e) {
            $pdo->rollBack();
            return false;
        }
    }
    
    return false;
}

function movePageDown($pageId) {
    global $pdo;
    
    $stmt = $pdo->prepare("SELECT sort_order FROM pages WHERE id = ?");
    $stmt->execute([$pageId]);
    $currentOrder = $stmt->fetchColumn();
    
    if (!$currentOrder) return false;
    
    $stmt = $pdo->prepare("SELECT id, sort_order FROM pages WHERE sort_order > ? ORDER BY sort_order ASC LIMIT 1");
    $stmt->execute([$currentOrder]);
    $nextPage = $stmt->fetch();
    
    if ($nextPage) {
        $pdo->beginTransaction();
        try {
            $stmt = $pdo->prepare("UPDATE pages SET sort_order = ? WHERE id = ?");
            $stmt->execute([$nextPage['sort_order'], $pageId]);
            
            $stmt = $pdo->prepare("UPDATE pages SET sort_order = ? WHERE id = ?");
            $stmt->execute([$currentOrder, $nextPage['id']]);
            
            $pdo->commit();
            return true;
        } catch (Exception $e) {
            $pdo->rollBack();
            return false;
        }
    }
    
    return false;
}

// Handle AJAX requests for moving pages
if (isset($_POST['action']) && isset($_POST['page_id']) && 
    ($_POST['action'] === 'move_up' || $_POST['action'] === 'move_down')) {
    requireLogin();
    
    $pageId = (int)$_POST['page_id'];
    $success = false;
    
    if ($_POST['action'] === 'move_up') {
        $success = movePageUp($pageId);
    } elseif ($_POST['action'] === 'move_down') {
        $success = movePageDown($pageId);
    }
    
    if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && 
        strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
        header('Content-Type: application/json');
        echo json_encode(['success' => $success]);
        exit;
    } else {
        header('Location: index.php');
        exit;
    }
}

function getSetting($key, $default = '') {
    global $pdo;
    
    if (!$pdo) {
        return $default;
    }
    
    try {
        $tableCheck = $pdo->query("SHOW TABLES LIKE 'settings'");
        if ($tableCheck->rowCount() === 0) {
            return $default;
        }
        
        $stmt = $pdo->prepare("SELECT setting_value FROM settings WHERE setting_key = ? LIMIT 1");
        $stmt->execute([$key]);
        $result = $stmt->fetchColumn();
        
        return ($result !== false) ? $result : $default;
        
    } catch (Exception $e) {
        return $default;
    }
}

function setSetting($key, $value) {
    global $pdo;
    
    if (!$pdo) {
        return false;
    }
    
    try {
        $tableCheck = $pdo->query("SHOW TABLES LIKE 'settings'");
        if ($tableCheck->rowCount() === 0) {
            return false;
        }
        
        $stmt = $pdo->prepare("INSERT INTO settings (setting_key, setting_value) VALUES (?, ?) ON DUPLICATE KEY UPDATE setting_value = ?");
        return $stmt->execute([$key, $value, $value]);
        
    } catch (Exception $e) {
        return false;
    }
}

?>